//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import <Flexo/FFEffect.h>

@class CHChannelFolder, FFSharedAudioUnit, NSArray, NSDictionary;

@interface FFAudioUnitEffect : FFEffect
{
    CHChannelFolder *_parameterFolder;
    CHChannelFolder *_nonClumpedFolder;
    NSArray *_clumpFolders;
    struct FFAudioUnitParameterList *_parameterList;
    FFSharedAudioUnit *_cachedUnit;
    NSDictionary *_effectState;
    NSDictionary *_preset;
    NSDictionary *_defaultPreset;
    BOOL _presetDirty;
    unsigned int _numChannels;
    double _sampleRate;
    _Bool _initOnceSetStackHasBeenCalled;
    BOOL _isSyncingChannelsToParameters;
    BOOL _savingCurrentEffectState;
}

+ (id)copyClassDescription;
@property(readonly) unsigned int audioChannelCount;
@property(readonly) double audioSampleRate;
- (id)initWithEffectID:(id)arg1;
- (void)dealloc;
- (void)_copyWithZone:(struct _NSZone *)arg1 into:(id)arg2;
- (void)_decodeFromCoder:(id)arg1 into:(id)arg2;
- (void)_postInit:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (void)setPreset:(id)arg1;
- (id)preset;
- (id)defaultPreset;
- (void)setAudioUnitEffectStateAsPreset:(id)arg1;
- (void)useDefaultPreset;
- (void)setPresetWithID:(int)arg1;
- (int)presetID;
- (void)setEffectState:(id)arg1;
- (void)setEffectStateWithNoUpdate:(id)arg1;
- (id)effectState;
- (int)saveCurrentEffectState;
- (void)revertToCurrentPreset;
- (void)_clearCachedUnit;
- (void)setEffectStack:(id)arg1;
- (id)cachedAudioUnit;
- (id)primaryAnimationChannel;
- (id)keyframeableChannelsFrom:(id)arg1;
- (id)keyframeableChannels;
- (void)effectWasRemovedFromStack;
- (void)loadEffectWithXMLElement:(id)arg1;
- (id)exportAsXMLElementWithExcludedChannels:(id)arg1;
- (id)exportAsXMLElement;
- (id)exportAsXMLElementWithDeprecatedEffectData:(id)arg1;
@property(nonatomic) BOOL presetDirty; // @synthesize presetDirty=_presetDirty;
@property(readonly) unsigned int numChannels; // @synthesize numChannels=_numChannels;
@property(readonly) double sampleRate; // @synthesize sampleRate=_sampleRate;

@end

