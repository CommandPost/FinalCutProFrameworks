//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

__attribute__((visibility("hidden")))
@interface FFHGTextureOwnedByRQ : NSObject
{
    // Error parsing type: ^{HGRenderQueue=^^?{atomic<unsigned int>=AI}iiiQQBBBQiiBBIBBBBBBB{atomic<unsigned int>=AI}BBQ{list<HGRenderExecUnit *, std::__1::allocator<HGRenderExecUnit *> >={__list_node_base<HGRenderExecUnit *, void *>=^{__list_node_base<HGRenderExecUnit *, void *>}^{__list_node_base<HGRenderExecUnit *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<HGRenderExecUnit *, void *> > >=Q}}^{HGSynchronizable}^{HGSynchronizable}{list<HGRenderJob *, std::__1::allocator<HGRenderJob *> >={__list_node_base<HGRenderJob *, void *>=^{__list_node_base<HGRenderJob *, void *>}^{__list_node_base<HGRenderJob *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<HGRenderJob *, void *> > >=Q}}{list<HGRenderJob *, std::__1::allocator<HGRenderJob *> >={__list_node_base<HGRenderJob *, void *>=^{__list_node_base<HGRenderJob *, void *>}^{__list_node_base<HGRenderJob *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<HGRenderJob *, void *> > >=Q}}Q{atomic<unsigned long long>=AQ}{map<int, bool, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, bool> > >={__tree<std::__1::__value_type<int, bool>, std::__1::__map_value_compare<int, std::__1::__value_type<int, bool>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, bool>, std::__1::less<int>, true> >=Q}}}{map<int, bool, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, bool> > >={__tree<std::__1::__value_type<int, bool>, std::__1::__map_value_compare<int, std::__1::__value_type<int, bool>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, bool>, std::__1::less<int>, true> >=Q}}}{map<int, unsigned long long, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, unsigned long long> > >={__tree<std::__1::__value_type<int, unsigned long long>, std::__1::__map_value_compare<int, std::__1::__value_type<int, unsigned long long>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, unsigned long long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, unsigned long long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, unsigned long long>, std::__1::less<int>, true> >=Q}}}{map<int, HGSynchronizable *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, HGSynchronizable *> > >={__tree<std::__1::__value_type<int, HGSynchronizable *>, std::__1::__map_value_compare<int, std::__1::__value_type<int, HGSynchronizable *>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, HGSynchronizable *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, HGSynchronizable *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, HGSynchronizable *>, std::__1::less<int>, true> >=Q}}}{deque<HGRenderJob *, std::__1::allocator<HGRenderJob *> >={__split_buffer<HGRenderJob **, std::__1::allocator<HGRenderJob **> >=^^^{HGRenderJob}^^^{HGRenderJob}^^^{HGRenderJob}{__compressed_pair<HGRenderJob ***, std::__1::allocator<HGRenderJob **> >=^^^{HGRenderJob}}}Q{__compressed_pair<unsigned long, std::__1::allocator<HGRenderJob *> >=Q}}^{HGSynchronizable}BQ{list<HGUserExecUnit *, std::__1::allocator<HGUserExecUnit *> >={__list_node_base<HGUserExecUnit *, void *>=^{__list_node_base<HGUserExecUnit *, void *>}^{__list_node_base<HGUserExecUnit *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<HGUserExecUnit *, void *> > >=Q}}^{HGSynchronizable}{list<HGUserJob *, std::__1::allocator<HGUserJob *> >={__list_node_base<HGUserJob *, void *>=^{__list_node_base<HGUserJob *, void *>}^{__list_node_base<HGUserJob *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<HGUserJob *, void *> > >=Q}}{deque<HGUserJob *, std::__1::allocator<HGUserJob *> >={__split_buffer<HGUserJob **, std::__1::allocator<HGUserJob **> >=^^^{HGUserJob}^^^{HGUserJob}^^^{HGUserJob}{__compressed_pair<HGUserJob ***, std::__1::allocator<HGUserJob **> >=^^^{HGUserJob}}}Q{__compressed_pair<unsigned long, std::__1::allocator<HGUserJob *> >=Q}}^{HGSynchronizable}{list<HGGPUReadbackExecUnit *, std::__1::allocator<HGGPUReadbackExecUnit *> >={__list_node_base<HGGPUReadbackExecUnit *, void *>=^{__list_node_base<HGGPUReadbackExecUnit *, void *>}^{__list_node_base<HGGPUReadbackExecUnit *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<HGGPUReadbackExecUnit *, void *> > >=Q}}^{HGSynchronizable}QQQ{deque<HGGPUReadbackJob *, std::__1::allocator<HGGPUReadbackJob *> >={__split_buffer<HGGPUReadbackJob **, std::__1::allocator<HGGPUReadbackJob **> >=^^^{HGGPUReadbackJob}^^^{HGGPUReadbackJob}^^^{HGGPUReadbackJob}{__compressed_pair<HGGPUReadbackJob ***, std::__1::allocator<HGGPUReadbackJob **> >=^^^{HGGPUReadbackJob}}}Q{__compressed_pair<unsigned long, std::__1::allocator<HGGPUReadbackJob *> >=Q}}^{HGSynchronizable}{list<HGGPUReadbackJob *, std::__1::allocator<HGGPUReadbackJob *> >={__list_node_base<HGGPUReadbackJob *, void *>=^{__list_node_base<HGGPUReadbackJob *, void *>}^{__list_node_base<HGGPUReadbackJob *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<HGGPUReadbackJob *, void *> > >=Q}}{map<HGPixelBufferObj *, unsigned long long, std::__1::less<HGPixelBufferObj *>, std::__1::allocator<std::__1::pair<HGPixelBufferObj *const, unsigned long long> > >={__tree<std::__1::__value_type<HGPixelBufferObj *, unsigned long long>, std::__1::__map_value_compare<HGPixelBufferObj *, std::__1::__value_type<HGPixelBufferObj *, unsigned long long>, std::__1::less<HGPixelBufferObj *>, true>, std::__1::allocator<std::__1::__value_type<HGPixelBufferObj *, unsigned long long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<HGPixelBufferObj *, unsigned long long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<HGPixelBufferObj *, std::__1::__value_type<HGPixelBufferObj *, unsigned long long>, std::__1::less<HGPixelBufferObj *>, true> >=Q}}}^{HGSynchronizable}{deque<HGPixelBufferObj *, std::__1::allocator<HGPixelBufferObj *> >={__split_buffer<HGPixelBufferObj **, std::__1::allocator<HGPixelBufferObj **> >=^^^{HGPixelBufferObj}^^^{HGPixelBufferObj}^^^{HGPixelBufferObj}{__compressed_pair<HGPixelBufferObj ***, std::__1::allocator<HGPixelBufferObj **> >=^^^{HGPixelBufferObj}}}Q{__compressed_pair<unsigned long, std::__1::allocator<HGPixelBufferObj *> >=Q}}{deque<HGRef<HGGLContext>, std::__1::allocator<HGRef<HGGLContext> > >={__split_buffer<HGRef<HGGLContext> *, std::__1::allocator<HGRef<HGGLContext> *> >=^^{HGRef<HGGLContext>}^^{HGRef<HGGLContext>}^^{HGRef<HGGLContext>}{__compressed_pair<HGRef<HGGLContext> **, std::__1::allocator<HGRef<HGGLContext> *> >=^^{HGRef<HGGLContext>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<HGRef<HGGLContext> > >=Q}}@}, name: _rq
    // Error parsing type: ^{HGGLTexture=^^?{atomic<unsigned int>=AI}ii{HGRect=iiii}{HGRect=iiii}QQQ^v^v{HGEdgePolicy=i[4f]}^{HGObject}^{HGGLRenderer}^{HGGLBuffer}{HGRect=iiii}IQQiiBB}, name: _tex
}

- (void)dealloc;
-     // Error parsing type: @32@0:8^{HGGLTexture=^^?{atomic<unsigned int>=AI}ii{HGRect=iiii}{HGRect=iiii}QQQ^v^v{HGEdgePolicy=i[4f]}^{HGObject}^{HGGLRenderer}^{HGGLBuffer}{HGRect=iiii}IQQiiBB}16^{HGRenderQueue=^^?{atomic<unsigned int>=AI}iiiQQBBBQiiBBIBBBBBBB{atomic<unsigned int>=AI}BBQ{list<HGRenderExecUnit *, std::__1::allocator<HGRenderExecUnit *> >={__list_node_base<HGRenderExecUnit *, void *>=^{__list_node_base<HGRenderExecUnit *, void *>}^{__list_node_base<HGRenderExecUnit *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<HGRenderExecUnit *, void *> > >=Q}}^{HGSynchronizable}^{HGSynchronizable}{list<HGRenderJob *, std::__1::allocator<HGRenderJob *> >={__list_node_base<HGRenderJob *, void *>=^{__list_node_base<HGRenderJob *, void *>}^{__list_node_base<HGRenderJob *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<HGRenderJob *, void *> > >=Q}}{list<HGRenderJob *, std::__1::allocator<HGRenderJob *> >={__list_node_base<HGRenderJob *, void *>=^{__list_node_base<HGRenderJob *, void *>}^{__list_node_base<HGRenderJob *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<HGRenderJob *, void *> > >=Q}}Q{atomic<unsigned long long>=AQ}{map<int, bool, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, bool> > >={__tree<std::__1::__value_type<int, bool>, std::__1::__map_value_compare<int, std::__1::__value_type<int, bool>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, bool>, std::__1::less<int>, true> >=Q}}}{map<int, bool, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, bool> > >={__tree<std::__1::__value_type<int, bool>, std::__1::__map_value_compare<int, std::__1::__value_type<int, bool>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, bool> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, bool>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, bool>, std::__1::less<int>, true> >=Q}}}{map<int, unsigned long long, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, unsigned long long> > >={__tree<std::__1::__value_type<int, unsigned long long>, std::__1::__map_value_compare<int, std::__1::__value_type<int, unsigned long long>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, unsigned long long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, unsigned long long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, unsigned long long>, std::__1::less<int>, true> >=Q}}}{map<int, HGSynchronizable *, std::__1::less<int>, std::__1::allocator<std::__1::pair<const int, HGSynchronizable *> > >={__tree<std::__1::__value_type<int, HGSynchronizable *>, std::__1::__map_value_compare<int, std::__1::__value_type<int, HGSynchronizable *>, std::__1::less<int>, true>, std::__1::allocator<std::__1::__value_type<int, HGSynchronizable *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<int, HGSynchronizable *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<int, std::__1::__value_type<int, HGSynchronizable *>, std::__1::less<int>, true> >=Q}}}{deque<HGRenderJob *, std::__1::allocator<HGRenderJob *> >={__split_buffer<HGRenderJob **, std::__1::allocator<HGRenderJob **> >=^^^{HGRenderJob}^^^{HGRenderJob}^^^{HGRenderJob}{__compressed_pair<HGRenderJob ***, std::__1::allocator<HGRenderJob **> >=^^^{HGRenderJob}}}Q{__compressed_pair<unsigned long, std::__1::allocator<HGRenderJob *> >=Q}}^{HGSynchronizable}BQ{list<HGUserExecUnit *, std::__1::allocator<HGUserExecUnit *> >={__list_node_base<HGUserExecUnit *, void *>=^{__list_node_base<HGUserExecUnit *, void *>}^{__list_node_base<HGUserExecUnit *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<HGUserExecUnit *, void *> > >=Q}}^{HGSynchronizable}{list<HGUserJob *, std::__1::allocator<HGUserJob *> >={__list_node_base<HGUserJob *, void *>=^{__list_node_base<HGUserJob *, void *>}^{__list_node_base<HGUserJob *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<HGUserJob *, void *> > >=Q}}{deque<HGUserJob *, std::__1::allocator<HGUserJob *> >={__split_buffer<HGUserJob **, std::__1::allocator<HGUserJob **> >=^^^{HGUserJob}^^^{HGUserJob}^^^{HGUserJob}{__compressed_pair<HGUserJob ***, std::__1::allocator<HGUserJob **> >=^^^{HGUserJob}}}Q{__compressed_pair<unsigned long, std::__1::allocator<HGUserJob *> >=Q}}^{HGSynchronizable}{list<HGGPUReadbackExecUnit *, std::__1::allocator<HGGPUReadbackExecUnit *> >={__list_node_base<HGGPUReadbackExecUnit *, void *>=^{__list_node_base<HGGPUReadbackExecUnit *, void *>}^{__list_node_base<HGGPUReadbackExecUnit *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<HGGPUReadbackExecUnit *, void *> > >=Q}}^{HGSynchronizable}QQQ{deque<HGGPUReadbackJob *, std::__1::allocator<HGGPUReadbackJob *> >={__split_buffer<HGGPUReadbackJob **, std::__1::allocator<HGGPUReadbackJob **> >=^^^{HGGPUReadbackJob}^^^{HGGPUReadbackJob}^^^{HGGPUReadbackJob}{__compressed_pair<HGGPUReadbackJob ***, std::__1::allocator<HGGPUReadbackJob **> >=^^^{HGGPUReadbackJob}}}Q{__compressed_pair<unsigned long, std::__1::allocator<HGGPUReadbackJob *> >=Q}}^{HGSynchronizable}{list<HGGPUReadbackJob *, std::__1::allocator<HGGPUReadbackJob *> >={__list_node_base<HGGPUReadbackJob *, void *>=^{__list_node_base<HGGPUReadbackJob *, void *>}^{__list_node_base<HGGPUReadbackJob *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<HGGPUReadbackJob *, void *> > >=Q}}{map<HGPixelBufferObj *, unsigned long long, std::__1::less<HGPixelBufferObj *>, std::__1::allocator<std::__1::pair<HGPixelBufferObj *const, unsigned long long> > >={__tree<std::__1::__value_type<HGPixelBufferObj *, unsigned long long>, std::__1::__map_value_compare<HGPixelBufferObj *, std::__1::__value_type<HGPixelBufferObj *, unsigned long long>, std::__1::less<HGPixelBufferObj *>, true>, std::__1::allocator<std::__1::__value_type<HGPixelBufferObj *, unsigned long long> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<HGPixelBufferObj *, unsigned long long>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<HGPixelBufferObj *, std::__1::__value_type<HGPixelBufferObj *, unsigned long long>, std::__1::less<HGPixelBufferObj *>, true> >=Q}}}^{HGSynchronizable}{deque<HGPixelBufferObj *, std::__1::allocator<HGPixelBufferObj *> >={__split_buffer<HGPixelBufferObj **, std::__1::allocator<HGPixelBufferObj **> >=^^^{HGPixelBufferObj}^^^{HGPixelBufferObj}^^^{HGPixelBufferObj}{__compressed_pair<HGPixelBufferObj ***, std::__1::allocator<HGPixelBufferObj **> >=^^^{HGPixelBufferObj}}}Q{__compressed_pair<unsigned long, std::__1::allocator<HGPixelBufferObj *> >=Q}}{deque<HGRef<HGGLContext>, std::__1::allocator<HGRef<HGGLContext> > >={__split_buffer<HGRef<HGGLContext> *, std::__1::allocator<HGRef<HGGLContext> *> >=^^{HGRef<HGGLContext>}^^{HGRef<HGGLContext>}^^{HGRef<HGGLContext>}{__compressed_pair<HGRef<HGGLContext> **, std::__1::allocator<HGRef<HGGLContext> *> >=^^{HGRef<HGGLContext>}}}Q{__compressed_pair<unsigned long, std::__1::allocator<HGRef<HGGLContext> > >=Q}}@}24, name: initWithHGObject:renderQueue:

@end

