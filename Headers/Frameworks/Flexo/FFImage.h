//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class FFImageRep, NSMutableDictionary, NSString;

@interface FFImage : NSObject
{
    FFImageRep *_representation;
    struct FFSynchronizable *_lockForSB_etc;
    struct opaqueCMSampleBuffer *_sampleBuffer;
    id <SampleBufferProvider> _sampleBufferProvider;
    NSString *_eventDocumentIDAndPath;
    BOOL _sampleBufferAlphaKnownToBeFullyOpaque;
    int _errorCode;
    NSMutableDictionary *_dict;
}

+ (id)newStereoEquirect:(id)arg1 rightEye:(id)arg2 cameraMode:(int)arg3 downstreamPT:(id)arg4;
+ (id)newFrameAtLocation:(int)arg1 withField1:(id)arg2 field2:(id)arg3 fieldDominance:(int)arg4 framePixelTransform:(id)arg5;
+ (_Bool)isYdownPixelTransform:(id)arg1;
+ (void)allowExtractMultipleHGNodesForUseInSameGraphOnly:(CDUnknownBlockType)arg1;
+     // Error parsing type: ^{HGNode=^^?{atomic<unsigned int>=AI}ii^vii^fi^{HGShaderEntry}^^{HGNodeInput}i^{HGBitmap}BBBBB{set<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >={__tree<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<HGNodeInput *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<HGNodeInput *> >=Q}}}i^{HGNode}{HGRect=iiii}{HGRect=iiii}^{HGRenderer}^{HGBitmap}^{HGNode}iii{HGRect=iiii}ii^{HGBitmap}{HGShaderBinding=[1i]iiiiiII}^{HGNodeChain}^{HGShaderEntry}iB{HGBlendingInfo=Qiiiiii}f}32@0:8^{HGNode=^^?{atomic<unsigned int>=AI}ii^vii^fi^{HGShaderEntry}^^{HGNodeInput}i^{HGBitmap}BBBBB{set<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >={__tree<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<HGNodeInput *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<HGNodeInput *> >=Q}}}i^{HGNode}{HGRect=iiii}{HGRect=iiii}^{HGRenderer}^{HGBitmap}^{HGNode}iii{HGRect=iiii}ii^{HGBitmap}{HGShaderBinding=[1i]iiiiiII}^{HGNodeChain}^{HGShaderEntry}iB{HGBlendingInfo=Qiiiiii}f}16^{HGNode=^^?{atomic<unsigned int>=AI}ii^vii^fi^{HGShaderEntry}^^{HGNodeInput}i^{HGBitmap}BBBBB{set<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >={__tree<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<HGNodeInput *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<HGNodeInput *> >=Q}}}i^{HGNode}{HGRect=iiii}{HGRect=iiii}^{HGRenderer}^{HGBitmap}^{HGNode}iii{HGRect=iiii}ii^{HGBitmap}{HGShaderBinding=[1i]iiiiiII}^{HGNodeChain}^{HGShaderEntry}iB{HGBlendingInfo=Qiiiiii}f}24, name: newCopyAlphaNodeWithImageSource:alphaSource:
+     // Error parsing type: ^{HGNode=^^?{atomic<unsigned int>=AI}ii^vii^fi^{HGShaderEntry}^^{HGNodeInput}i^{HGBitmap}BBBBB{set<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >={__tree<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<HGNodeInput *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<HGNodeInput *> >=Q}}}i^{HGNode}{HGRect=iiii}{HGRect=iiii}^{HGRenderer}^{HGBitmap}^{HGNode}iii{HGRect=iiii}ii^{HGBitmap}{HGShaderBinding=[1i]iiiiiII}^{HGNodeChain}^{HGShaderEntry}iB{HGBlendingInfo=Qiiiiii}f}64@0:8^{HGNode=^^?{atomic<unsigned int>=AI}ii^vii^fi^{HGShaderEntry}^^{HGNodeInput}i^{HGBitmap}BBBBB{set<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >={__tree<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<HGNodeInput *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<HGNodeInput *> >=Q}}}i^{HGNode}{HGRect=iiii}{HGRect=iiii}^{HGRenderer}^{HGBitmap}^{HGNode}iii{HGRect=iiii}ii^{HGBitmap}{HGShaderBinding=[1i]iiiiiII}^{HGNodeChain}^{HGShaderEntry}iB{HGBlendingInfo=Qiiiiii}f}16^{CGColorSpace=}24i32i36i40f44B48B52B56f60, name: newStripingNodeFromNode:nodeSpace:spacing:width:phase:zebraScale:oobLuma:luma90:oobColor:drawMode:
+ (void)addRotationToImageMatrix:(id *)arg1 rotation:(int)arg2 flipY:(BOOL)arg3;
+ (id)newSolidColorHeliumImageWithRed:(float)arg1 green:(float)arg2 blue:(float)arg3 alpha:(float)arg4 colorSpace:(struct CGColorSpace *)arg5 dod:(struct CGRect)arg6 pixelTransform:(id)arg7;
+     // Error parsing type: v24@0:8^{HGNode=^^?{atomic<unsigned int>=AI}ii^vii^fi^{HGShaderEntry}^^{HGNodeInput}i^{HGBitmap}BBBBB{set<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >={__tree<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<HGNodeInput *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<HGNodeInput *> >=Q}}}i^{HGNode}{HGRect=iiii}{HGRect=iiii}^{HGRenderer}^{HGBitmap}^{HGNode}iii{HGRect=iiii}ii^{HGBitmap}{HGShaderBinding=[1i]iiiiiII}^{HGNodeChain}^{HGShaderEntry}iB{HGBlendingInfo=Qiiiiii}f}16, name: releaseHGNode:
+ (id)newCV420ImageFromTestLuma:(int)arg1 cb:(unsigned char)arg2 cr:(unsigned char)arg3 rect:(struct CGRect)arg4 pixelFormat:(id)arg5 colorSpace:(struct CGColorSpace *)arg6;
+ (void)iterateFor420And422SimpleColorPatterns:(id)arg1 callback:(CDUnknownBlockType)arg2;
+ (id)newPrimaryBlocksTestImage:(struct CGRect)arg1 colorsToTest:(int)arg2 pf:(id)arg3 cs:(struct CGColorSpace *)arg4 retColorLabels:(id *)arg5;
+ (id)newImageFromTestColor_u64:(unsigned long long)arg1 rect:(struct CGRect)arg2 pixelFormat:(id)arg3 colorSpace:(struct CGColorSpace *)arg4;
+ (id)new2vuyImageFromTestLuma:(int)arg1 cb:(unsigned char)arg2 cr:(unsigned char)arg3 rect:(struct CGRect)arg4 pixelFormat:(id)arg5 colorSpace:(struct CGColorSpace *)arg6;
+ (id)new420ImageFromTestLuma:(int)arg1 cb:(unsigned char)arg2 cr:(unsigned char)arg3 rect:(struct CGRect)arg4 pixelFormat:(id)arg5 colorSpace:(struct CGColorSpace *)arg6 style:(id)arg7;
+ (id)newHG420ImageFromTestLuma:(int)arg1 cb:(unsigned char)arg2 cr:(unsigned char)arg3 rect:(struct CGRect)arg4 pixelFormat:(id)arg5 colorSpace:(struct CGColorSpace *)arg6 style:(id)arg7;
+ (id)newImageFromTestColor:(unsigned int)arg1 rect:(struct CGRect)arg2 pixelFormat:(id)arg3 colorSpace:(struct CGColorSpace *)arg4;
+ (id)newImageFromTestColor:(unsigned int)arg1 rect:(struct CGRect)arg2 pixelFormat:(id)arg3 colorSpace:(struct CGColorSpace *)arg4 markAsStraight:(_Bool)arg5;
+ (id)newImageFromTestColor:(unsigned int)arg1 rect:(struct CGRect)arg2 pixelFormat:(id)arg3 colorSpace:(struct CGColorSpace *)arg4 markAsStraight:(_Bool)arg5 markAsNeedingClamp:(_Bool)arg6;
- (id)newZeroZeroBasedImage;
- (id)newShiftedCroppedImage:(struct CGRect)arg1;
- (struct CGRect)updatePixelSpaceBounds:(struct CGRect)arg1 toPixelTransform:(id)arg2;
- (unsigned long long)approximateMemoryUsage;
- (BOOL)dumpImageToURL:(id)arg1;
- (BOOL)dumpImage;
- (id)description;
- (id)objectForKey:(id)arg1;
- (void)addEntriesFromDictionary:(id)arg1;
- (void)setObject:(id)arg1 forKey:(id)arg2;
- (id)newFlattenedFFImageWithFormat:(id)arg1 location:(int)arg2 flattenOptions:(CDStruct_302d8f15 *)arg3;
- (id)newFlattenedFFImageWithFormat:(id)arg1 location:(int)arg2 flattenOptions:(CDStruct_302d8f15 *)arg3 roi:(struct CGRect)arg4 pixelTransform:(id)arg5 workingSpace:(int)arg6;
- (id)newFFImageWithBackground:(struct CGRect)arg1 bgColor:(id)arg2 format:(id)arg3;
- (id)newFFImageWithPixelTransform:(id)arg1 workingSpace:(int)arg2;
- (id)newFFImageWithFormat:(id)arg1 pixelTransform:(id)arg2 workingSpace:(int)arg3;
- (id)_mutableCopyDict;
- (id)newTextureBufferWithFormat:(id)arg1 location:(int)arg2 roi:(struct CGRect)arg3 pixelTransform:(id)arg4 workingSpace:(int)arg5;
- (id)newTextureBufferWithFormatByFlatteningIfNeeded:(id)arg1 location:(int)arg2 roi:(struct CGRect)arg3 pixelTransform:(id)arg4 flattenOptions:(CDStruct_302d8f15 *)arg5 workingSpace:(int)arg6;
- (id)newSimpleTextureBufferInFormat:(id)arg1 location:(int)arg2;
- (id)newSimplePixelBufferInFormat:(id)arg1;
- (id)newPixelBufferWithFormat:(id)arg1 roi:(struct CGRect)arg2 pixelTransform:(id)arg3 workingSpace:(int)arg4;
- (id)newPixelBufferWithFormatByFlatteningIfNeeded:(id)arg1 roi:(struct CGRect)arg2 pixelTransform:(id)arg3 flattenOptions:(const CDStruct_302d8f15 *)arg4 workingSpace:(int)arg5;
- (id)createTransformedImage:(id)arg1;
- (id)createScaledImageByX:(double)arg1 Y:(double)arg2;
- (void)setImageRepBindingInfo:(id)arg1;
- (id)imageRepBindingInfo;
- (struct CGColorSpace *)colorSpace;
- (struct CGRect)squarePixelRect;
- (id)pixelTransform;
- (id)nativePixelFormat;
- (unsigned int)field;
- (struct CGRect)pixelSpaceBounds;
- (struct CGRect)imageSpaceBounds;
- (void)setErrorCode:(int)arg1;
- (int)errorCode;
- (BOOL)sampleBufferAlphaKnownToBeFullyOpaque;
- (id)eventDocumentIDAndPath;
- (struct opaqueCMSampleBuffer *)sampleBuffer;
- (void)setSampleBuffer:(struct opaqueCMSampleBuffer *)arg1 sampleBufferProvider:(id)arg2 eventDocumentIDAndPath:(id)arg3 knownToBeFullyOpaque:(BOOL)arg4;
- (id)representation;
- (id)mutableCopy;
- (void)dealloc;
- (id)initWithRepresentation:(id)arg1;
-     // Error parsing type: ^{HGNode=^^?{atomic<unsigned int>=AI}ii^vii^fi^{HGShaderEntry}^^{HGNodeInput}i^{HGBitmap}BBBBB{set<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >={__tree<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<HGNodeInput *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<HGNodeInput *> >=Q}}}i^{HGNode}{HGRect=iiii}{HGRect=iiii}^{HGRenderer}^{HGBitmap}^{HGNode}iii{HGRect=iiii}ii^{HGBitmap}{HGShaderBinding=[1i]iiiiiII}^{HGNodeChain}^{HGShaderEntry}iB{HGBlendingInfo=Qiiiiii}f}36@0:8I16i20i24^{FFRangeCheckEpsilonValues=dddd}28, name: newRangeCheckNodeForMode:withFilterQuality:workingSpace:epsilonValues:
- (id)newFFImageWithUpdatedPT:(id)arg1 psb:(struct CGRect)arg2 field:(unsigned int)arg3;
- (id)newTextureWrappedImageWithMode:(int)arg1;
- (id)newTextureWrappedImageWithMode:(int)arg1 withCropRect:(struct CGRect *)arg2;
- (id)newTextureWrappedImage;
- (id)newCroppedImage:(struct CGRect)arg1;
-     // Error parsing type: ^{HGNode=^^?{atomic<unsigned int>=AI}ii^vii^fi^{HGShaderEntry}^^{HGNodeInput}i^{HGBitmap}BBBBB{set<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >={__tree<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<HGNodeInput *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<HGNodeInput *> >=Q}}}i^{HGNode}{HGRect=iiii}{HGRect=iiii}^{HGRenderer}^{HGBitmap}^{HGNode}iii{HGRect=iiii}ii^{HGBitmap}{HGShaderBinding=[1i]iiiiiII}^{HGNodeChain}^{HGShaderEntry}iB{HGBlendingInfo=Qiiiiii}f}64@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48@56, name: newHGNodeWithBackground:bgColor:compositingFormat:
-     // Error parsing type: ^{HGNode=^^?{atomic<unsigned int>=AI}ii^vii^fi^{HGShaderEntry}^^{HGNodeInput}i^{HGBitmap}BBBBB{set<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >={__tree<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<HGNodeInput *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<HGNodeInput *> >=Q}}}i^{HGNode}{HGRect=iiii}{HGRect=iiii}^{HGRenderer}^{HGBitmap}^{HGNode}iii{HGRect=iiii}ii^{HGBitmap}{HGShaderBinding=[1i]iiiiiII}^{HGNodeChain}^{HGShaderEntry}iB{HGBlendingInfo=Qiiiiii}f}80@0:8@16@24i32@36{CGRect={CGPoint=dd}{CGSize=dd}}44i76, name: newHGNodeWithPreTransformAndCropInFormat:pixelTransform:filterQuality:preTransform:cropRect:workingSpace:
-     // Error parsing type: ^{HGNode=^^?{atomic<unsigned int>=AI}ii^vii^fi^{HGShaderEntry}^^{HGNodeInput}i^{HGBitmap}BBBBB{set<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >={__tree<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<HGNodeInput *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<HGNodeInput *> >=Q}}}i^{HGNode}{HGRect=iiii}{HGRect=iiii}^{HGRenderer}^{HGBitmap}^{HGNode}iii{HGRect=iiii}ii^{HGBitmap}{HGShaderBinding=[1i]iiiiiII}^{HGNodeChain}^{HGShaderEntry}iB{HGBlendingInfo=Qiiiiii}f}52@0:8@16i24i28c32^@36^^{CGColorSpace}44, name: newLazyHGNodeWithPT:workingSpace:filterQuality:filterToField:retPF:retCS:
-     // Error parsing type: ^{HGNode=^^?{atomic<unsigned int>=AI}ii^vii^fi^{HGShaderEntry}^^{HGNodeInput}i^{HGBitmap}BBBBB{set<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >={__tree<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<HGNodeInput *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<HGNodeInput *> >=Q}}}i^{HGNode}{HGRect=iiii}{HGRect=iiii}^{HGRenderer}^{HGBitmap}^{HGNode}iii{HGRect=iiii}ii^{HGBitmap}{HGShaderBinding=[1i]iiiiiII}^{HGNodeChain}^{HGShaderEntry}iB{HGBlendingInfo=Qiiiiii}f}32@0:8^@16^^{CGColorSpace}24, name: newLazyHGNodeRetPF:retCS:
-     // Error parsing type: ^{HGNode=^^?{atomic<unsigned int>=AI}ii^vii^fi^{HGShaderEntry}^^{HGNodeInput}i^{HGBitmap}BBBBB{set<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >={__tree<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<HGNodeInput *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<HGNodeInput *> >=Q}}}i^{HGNode}{HGRect=iiii}{HGRect=iiii}^{HGRenderer}^{HGBitmap}^{HGNode}iii{HGRect=iiii}ii^{HGBitmap}{HGShaderBinding=[1i]iiiiiII}^{HGNodeChain}^{HGShaderEntry}iB{HGBlendingInfo=Qiiiiii}f}32@0:8^@16^^{CGColorSpace}24, name: newUnmodifiedHGNodeRetPF:retCS:
-     // Error parsing type: ^{HGNode=^^?{atomic<unsigned int>=AI}ii^vii^fi^{HGShaderEntry}^^{HGNodeInput}i^{HGBitmap}BBBBB{set<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >={__tree<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<HGNodeInput *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<HGNodeInput *> >=Q}}}i^{HGNode}{HGRect=iiii}{HGRect=iiii}^{HGRenderer}^{HGBitmap}^{HGNode}iii{HGRect=iiii}ii^{HGBitmap}{HGShaderBinding=[1i]iiiiiII}^{HGNodeChain}^{HGShaderEntry}iB{HGBlendingInfo=Qiiiiii}f}24@0:8@16, name: newUnscaledHGNodeInFormat:
-     // Error parsing type: ^{HGNode=^^?{atomic<unsigned int>=AI}ii^vii^fi^{HGShaderEntry}^^{HGNodeInput}i^{HGBitmap}BBBBB{set<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >={__tree<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<HGNodeInput *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<HGNodeInput *> >=Q}}}i^{HGNode}{HGRect=iiii}{HGRect=iiii}^{HGRenderer}^{HGBitmap}^{HGNode}iii{HGRect=iiii}ii^{HGBitmap}{HGShaderBinding=[1i]iiiiiII}^{HGNodeChain}^{HGShaderEntry}iB{HGBlendingInfo=Qiiiiii}f}44@0:8@16i24^@28^^{CGColorSpace}36, name: newLazyHGNodeWithPT:workingSpace:retPF:retCS:
-     // Error parsing type: ^{HGNode=^^?{atomic<unsigned int>=AI}ii^vii^fi^{HGShaderEntry}^^{HGNodeInput}i^{HGBitmap}BBBBB{set<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >={__tree<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<HGNodeInput *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<HGNodeInput *> >=Q}}}i^{HGNode}{HGRect=iiii}{HGRect=iiii}^{HGRenderer}^{HGBitmap}^{HGNode}iii{HGRect=iiii}ii^{HGBitmap}{HGShaderBinding=[1i]iiiiiII}^{HGNodeChain}^{HGShaderEntry}iB{HGBlendingInfo=Qiiiiii}f}36@0:8@16@24i32, name: newHGNodeInFormat:withPT:workingSpace:
-     // Error parsing type: ^{HGNode=^^?{atomic<unsigned int>=AI}ii^vii^fi^{HGShaderEntry}^^{HGNodeInput}i^{HGBitmap}BBBBB{set<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >={__tree<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<HGNodeInput *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<HGNodeInput *> >=Q}}}i^{HGNode}{HGRect=iiii}{HGRect=iiii}^{HGRenderer}^{HGBitmap}^{HGNode}iii{HGRect=iiii}ii^{HGBitmap}{HGShaderBinding=[1i]iiiiiII}^{HGNodeChain}^{HGShaderEntry}iB{HGBlendingInfo=Qiiiiii}f}44@0:8@16@24i32i36c40, name: newHGNodeInFormat:withPT:workingSpace:filterQuality:filterToField:
-     // Error parsing type: @76@0:8^{HGNode=^^?{atomic<unsigned int>=AI}ii^vii^fi^{HGShaderEntry}^^{HGNodeInput}i^{HGBitmap}BBBBB{set<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >={__tree<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<HGNodeInput *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<HGNodeInput *> >=Q}}}i^{HGNode}{HGRect=iiii}{HGRect=iiii}^{HGRenderer}^{HGBitmap}^{HGNode}iii{HGRect=iiii}ii^{HGBitmap}{HGShaderBinding=[1i]iiiiiII}^{HGNodeChain}^{HGShaderEntry}iB{HGBlendingInfo=Qiiiiii}f}16@24@32{CGRect={CGPoint=dd}{CGSize=dd}}40I72, name: initWithHGNode:formatDesc:pixelTransform:pixelSpaceBounds:field:
-     // Error parsing type: @84@0:8^{HGNode=^^?{atomic<unsigned int>=AI}ii^vii^fi^{HGShaderEntry}^^{HGNodeInput}i^{HGBitmap}BBBBB{set<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >={__tree<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<HGNodeInput *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<HGNodeInput *> >=Q}}}i^{HGNode}{HGRect=iiii}{HGRect=iiii}^{HGRenderer}^{HGBitmap}^{HGNode}iii{HGRect=iiii}ii^{HGBitmap}{HGShaderBinding=[1i]iiiiiII}^{HGNodeChain}^{HGShaderEntry}iB{HGBlendingInfo=Qiiiiii}f}16^{CGColorSpace=}24@32{CGRect={CGPoint=dd}{CGSize=dd}}40I72@76, name: initWithHGNode:colorSpace:pixelTransform:pixelSpaceBounds:field:pixelFormat:
- (struct CGImage *)newCGImageRef;
- (id)initWithCGImageRef:(struct CGImage *)arg1 colorSpace:(struct CGColorSpace *)arg2 pixelTransform:(id)arg3 overrideAlphaInfo:(int)arg4;
- (id)initWithCGImageRef:(struct CGImage *)arg1 colorSpace:(struct CGColorSpace *)arg2 pixelTransform:(id)arg3;
- (void)newPixelBufferWithFormat:(id)arg1 roi:(struct CGRect)arg2 colorSpace:(struct CGColorSpace *)arg3 pixelTransform:(id)arg4;
- (void)newTextureBufferWithFormat:(id)arg1 location:(int)arg2 roi:(struct CGRect)arg3 colorSpace:(struct CGColorSpace *)arg4 pixelTransform:(id)arg5;
- (void)newFFImageWithBackground:(struct CGRect)arg1 bgColor:(id)arg2 pixelFormat:(id)arg3 colorSpace:(struct CGColorSpace *)arg4 pixelTransform:(id)arg5;
- (void)newFlattenedFFImageWithFormat:(id)arg1 location:(int)arg2 flattenOptions:(CDStruct_302d8f15 *)arg3 roi:(struct CGRect)arg4 colorSpace:(struct CGColorSpace *)arg5 pixelTransform:(id)arg6 field:(unsigned int)arg7;
- (void)newFlattenedFFImageWithFormat:(id)arg1 location:(int)arg2 roi:(struct CGRect)arg3 colorSpace:(struct CGColorSpace *)arg4 pixelTransform:(id)arg5 field:(unsigned int)arg6;
- (void)newFFImageWithPixelFormat:(id)arg1 colorSpace:(struct CGColorSpace *)arg2 pixelTransform:(id)arg3;
- (struct opaqueCMSampleBuffer *)newCMSampleBufferForAVSampleBufferDisplayLayerWithMasteringDisplayColorVolumeExtensionData:(id)arg1 contentLightLevelInfoExtensionData:(id)arg2;
- (struct opaqueCMSampleBuffer *)newCMSampleBufferForAVSampleBufferDisplayLayer;
- (id)initFlattenNodeWithImage:(id)arg1 flattenMode:(int)arg2;
- (id)initFlattenNodeWithImage:(id)arg1 force8Bit:(_Bool)arg2;
- (id)initWithFFPixelBuffer:(id)arg1 colorSpace:(struct CGColorSpace *)arg2 pixelTransform:(id)arg3 field:(unsigned int)arg4;
- (id)initWithFFPixelBuffer:(id)arg1 colorSpace:(struct CGColorSpace *)arg2 pixelTransform:(id)arg3 field:(unsigned int)arg4 disable422Filtering:(BOOL)arg5 backedByCV:(_Bool)arg6;
- (id)initWithFFTextureBuffer:(id)arg1 colorSpace:(struct CGColorSpace *)arg2 pixelTransform:(id)arg3;
- (id)initCacheNodeWithImage:(id)arg1 locationHint:(int)arg2 cacheMode:(unsigned int)arg3 md5:(CDStruct_bdcb2b0d)arg4 offset:(long long)arg5 cacheFmt:(id)arg6;
- (id)initWithLumaRep:(id)arg1 chromaRep:(id)arg2 formatDesc:(id)arg3 pixelTransform:(id)arg4 pixelSpaceBounds:(struct CGRect)arg5 field:(unsigned int)arg6 sourceColorConformer:(struct FFSourceColorConformBaseClass *)arg7 sourceCCTargetColorSpace:(int)arg8;
- (id)initBiplanarWithLumaTexture:(id)arg1 chromaTexture:(id)arg2 formatDesc:(id)arg3 pixelTransform:(id)arg4 pixelSpaceBounds:(struct CGRect)arg5 field:(unsigned int)arg6;
- (id)initBiplanarWithLumaPixelBuffer:(id)arg1 chromaPixelBuffer:(id)arg2 formatDesc:(id)arg3 pixelTransform:(id)arg4 pixelSpaceBounds:(struct CGRect)arg5 field:(unsigned int)arg6;
- (struct __CVBuffer *)newCVPixelBufferWithFormat:(id)arg1 roi:(struct CGRect)arg2 colorSpace:(struct CGColorSpace *)arg3 pixelTransform:(id)arg4 flipped:(BOOL)arg5 needIOSurfaceBacked:(BOOL)arg6;
- (struct __CVBuffer *)newCVPixelBufferWithFormat:(id)arg1 roi:(struct CGRect)arg2 colorSpace:(struct CGColorSpace *)arg3 pixelTransform:(id)arg4 flipped:(BOOL)arg5;
- (id)initWithCVImageBuffer:(struct __CVBuffer *)arg1 pixelFormat:(id)arg2 colorSpace:(struct CGColorSpace *)arg3 pixelTransform:(id)arg4 field:(unsigned int)arg5 sourceColorConformer:(struct FFSourceColorConformBaseClass *)arg6 sourceColorConformTargetColorSpace:(int)arg7;
- (id)initWithCVImageBuffer:(struct __CVBuffer *)arg1 pixelFormat:(id)arg2 colorSpace:(struct CGColorSpace *)arg3 pixelTransform:(id)arg4 field:(unsigned int)arg5;
- (id)initWithCVImageBuffer:(struct __CVBuffer *)arg1 origin:(struct CGPoint)arg2 pixelTransform:(id)arg3 field:(unsigned int)arg4 overrideAlphaInfo:(int)arg5 disable422Filtering:(BOOL)arg6 sourceColorConformer:(struct FFSourceColorConformBaseClass *)arg7 sourceColorConformTargetColorSpace:(int)arg8;
- (id)initWithCVImageBuffer:(struct __CVBuffer *)arg1 origin:(struct CGPoint)arg2 pixelTransform:(id)arg3 field:(unsigned int)arg4 overrideAlphaInfo:(int)arg5 sourceColorConformer:(struct FFSourceColorConformBaseClass *)arg6 sourceColorConformTargetColorSpace:(int)arg7;
- (id)initWithCVImageBuffer:(struct __CVBuffer *)arg1 origin:(struct CGPoint)arg2 pixelTransform:(id)arg3 field:(unsigned int)arg4 overrideAlphaInfo:(int)arg5 disable422Filtering:(BOOL)arg6;
- (id)initWithCVImageBuffer:(struct __CVBuffer *)arg1 origin:(struct CGPoint)arg2 pixelTransform:(id)arg3 field:(unsigned int)arg4 overrideAlphaInfo:(int)arg5;
- (id)initWithFFHGCVPB:(id)arg1 colorSpace:(struct CGColorSpace *)arg2 pixelTransform:(id)arg3 sourceColorConformer:(struct FFSourceColorConformBaseClass *)arg4 sourceCCTargetColorSpace:(int)arg5;
- (id)initWithFFHGCVPB:(id)arg1 colorSpace:(struct CGColorSpace *)arg2 pixelTransform:(id)arg3;
- (id)initWithDeferredBlock:(CDUnknownBlockType)arg1 format:(id)arg2 pixelTransform:(id)arg3 pixelSpaceBounds:(struct CGRect)arg4 field:(unsigned int)arg5;

@end

