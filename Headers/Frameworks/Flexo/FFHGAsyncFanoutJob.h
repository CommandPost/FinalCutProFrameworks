//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import <Flexo/FFHGAsyncJob.h>

@class FFHGAsyncQueue, FFImage, FFImageRepBindingInfo, NSConditionLock, NSMutableArray, NSObject<HGRQJobProtocol>, NSObject<OS_dispatch_group>;

@interface FFHGAsyncFanoutJob : FFHGAsyncJob
{
    NSConditionLock *_state;
    FFHGAsyncQueue *_assignedQueue;
    FFImage *_image;
    FFImageRepBindingInfo *_bindingInfo;
    // Error parsing type: ^{HGRenderJob=^^?{atomic<unsigned int>=AI}iii{shared_ptr<const HGComputeDevice>=^{HGComputeDevice}^{__shared_weak_count}}{vector<std::__1::shared_ptr<const HGComputeDevice>, std::__1::allocator<std::__1::shared_ptr<const HGComputeDevice> > >=^{shared_ptr<const HGComputeDevice>}^{shared_ptr<const HGComputeDevice>}{__compressed_pair<std::__1::shared_ptr<const HGComputeDevice> *, std::__1::allocator<std::__1::shared_ptr<const HGComputeDevice> > >=^{shared_ptr<const HGComputeDevice>}}}{shared_ptr<const HGComputeDevice>=^{HGComputeDevice}^{__shared_weak_count}}{shared_ptr<const HGGPUComputeDevice>=^{HGGPUComputeDevice}^{__shared_weak_count}}iiiiiiQiiiQddd^{HGRenderer}iiiBBBCQ^v*^{HGRenderQueue}^{HGRenderContext}^?QQQIII^{HGSynchronizable}^{HGSynchronizable}{vector<HGRenderNode *, std::__1::allocator<HGRenderNode *> >=^^{HGRenderNode}^^{HGRenderNode}{__compressed_pair<HGRenderNode **, std::__1::allocator<HGRenderNode *> >=^^{HGRenderNode}}}{vector<HGBitmapLoader *, std::__1::allocator<HGBitmapLoader *> >=^^{HGBitmapLoader}^^{HGBitmapLoader}{__compressed_pair<HGBitmapLoader **, std::__1::allocator<HGBitmapLoader *> >=^^{HGBitmapLoader}}}}, name: _renderJob
    NSMutableArray *_outputs;
    NSMutableArray *_bypassOutputs;
    NSObject<OS_dispatch_group> *_bypassJobsGroup;
    NSConditionLock *_bypassJobsCond;
    // Error parsing type: ^{HGRenderer=^^?{atomic<unsigned int>=AI}^{HGNode}^{HGBitmap}[8{HGRendererTextureUnit=^{HGBitmap}^{HGTransform}i}]{vector<DepthBufferManager *, std::__1::allocator<DepthBufferManager *> >=^^{DepthBufferManager}^^{DepthBufferManager}{__compressed_pair<DepthBufferManager **, std::__1::allocator<DepthBufferManager *> >=^^{DepthBufferManager}}}{vector<HGExecutionUnit *, std::__1::allocator<HGExecutionUnit *> >=^^{HGExecutionUnit}^^{HGExecutionUnit}{__compressed_pair<HGExecutionUnit **, std::__1::allocator<HGExecutionUnit *> >=^^{HGExecutionUnit}}}^{HGExecutionData}^{HGSyncData}{_opaque_pthread_rwlock_t=q[192c]}{_opaque_pthread_mutex_t=q[56c]}^{HGLUTCacheManager}^{GraphStats}^{RendererStats}iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii{HGCache=^^?i^{HGCacheEntry}^{HGCacheEntry}^{HGCacheEntry}{_opaque_pthread_mutex_t=q[56c]}}BBBI[2^{HGLimits}]i{HGDotGraph={map<unsigned long, HGDotGraph::Node, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, HGDotGraph::Node> > >={__tree<std::__1::__value_type<unsigned long, HGDotGraph::Node>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, HGDotGraph::Node>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, HGDotGraph::Node> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, HGDotGraph::Node>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, HGDotGraph::Node>, std::__1::less<unsigned long>, true> >=Q}}}{map<std::__1::tuple<unsigned long, unsigned long>, HGDotGraph::Edge, std::__1::less<std::__1::tuple<unsigned long, unsigned long> >, std::__1::allocator<std::__1::pair<const std::__1::tuple<unsigned long, unsigned long>, HGDotGraph::Edge> > >={__tree<std::__1::__value_type<std::__1::tuple<unsigned long, unsigned long>, HGDotGraph::Edge>, std::__1::__map_value_compare<std::__1::tuple<unsigned long, unsigned long>, std::__1::__value_type<std::__1::tuple<unsigned long, unsigned long>, HGDotGraph::Edge>, std::__1::less<std::__1::tuple<unsigned long, unsigned long> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::tuple<unsigned long, unsigned long>, HGDotGraph::Edge> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::tuple<unsigned long, unsigned long>, HGDotGraph::Edge>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::tuple<unsigned long, unsigned long>, std::__1::__value_type<std::__1::tuple<unsigned long, unsigned long>, HGDotGraph::Edge>, std::__1::less<std::__1::tuple<unsigned long, unsigned long> >, true> >=Q}}}^{__sFILE}BB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{HGBufferDumper={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiB}IiQQi^{HGLimitsCache}^{HGRenderQueue}^v{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}, name: _specificRenderer
    NSObject<HGRQJobProtocol> *_cbObj;
    _Bool _dumpGraph;
    _Bool _dumpDotFile;
    // Error parsing type: {?="_nestDepth"i"_startTimes"[16q]"_blockedTimes"[24Aq]}, name: _blockedInfo
    struct _opaque_pthread_t *_threadThatInstalledBlockedInfo;
    long long _bypassCostUSec;
    // Error parsing type: {?="_nestDepth"i"_startTimes"[16q]"_blockedTimes"[24Aq]}, name: _bypassBlockedInfo
    int _amortizationCount;
    double _gpuIdleTimeBeforeJob;
    _Bool _dumpRenderStats;
}

+ (id)newThumbImageForPQorHLGFromFFImage:(id)arg1;
+ (id)newClipped709FFImageFromFFImage:(id)arg1;
+ (id)newDisplayLinear2020FFImageFromFFImage:(id)arg1;
@property _Bool dumpRenderStats; // @synthesize dumpRenderStats=_dumpRenderStats;
@property _Bool dumpDotFile; // @synthesize dumpDotFile=_dumpDotFile;
@property _Bool dumpGraph; // @synthesize dumpGraph=_dumpGraph;
// Error parsing type for property specificRenderer:
// Property attributes: T^{HGRenderer=^^?{atomic<unsigned int>=AI}^{HGNode}^{HGBitmap}[8{HGRendererTextureUnit=^{HGBitmap}^{HGTransform}i}]{vector<DepthBufferManager *, std::__1::allocator<DepthBufferManager *> >=^^{DepthBufferManager}^^{DepthBufferManager}{__compressed_pair<DepthBufferManager **, std::__1::allocator<DepthBufferManager *> >=^^{DepthBufferManager}}}{vector<HGExecutionUnit *, std::__1::allocator<HGExecutionUnit *> >=^^{HGExecutionUnit}^^{HGExecutionUnit}{__compressed_pair<HGExecutionUnit **, std::__1::allocator<HGExecutionUnit *> >=^^{HGExecutionUnit}}}^{HGExecutionData}^{HGSyncData}{_opaque_pthread_rwlock_t=q[192c]}{_opaque_pthread_mutex_t=q[56c]}^{HGLUTCacheManager}^{GraphStats}^{RendererStats}iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii{HGCache=^^?i^{HGCacheEntry}^{HGCacheEntry}^{HGCacheEntry}{_opaque_pthread_mutex_t=q[56c]}}BBBI[2^{HGLimits}]i{HGDotGraph={map<unsigned long, HGDotGraph::Node, std::__1::less<unsigned long>, std::__1::allocator<std::__1::pair<const unsigned long, HGDotGraph::Node> > >={__tree<std::__1::__value_type<unsigned long, HGDotGraph::Node>, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, HGDotGraph::Node>, std::__1::less<unsigned long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long, HGDotGraph::Node> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long, HGDotGraph::Node>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long, std::__1::__value_type<unsigned long, HGDotGraph::Node>, std::__1::less<unsigned long>, true> >=Q}}}{map<std::__1::tuple<unsigned long, unsigned long>, HGDotGraph::Edge, std::__1::less<std::__1::tuple<unsigned long, unsigned long> >, std::__1::allocator<std::__1::pair<const std::__1::tuple<unsigned long, unsigned long>, HGDotGraph::Edge> > >={__tree<std::__1::__value_type<std::__1::tuple<unsigned long, unsigned long>, HGDotGraph::Edge>, std::__1::__map_value_compare<std::__1::tuple<unsigned long, unsigned long>, std::__1::__value_type<std::__1::tuple<unsigned long, unsigned long>, HGDotGraph::Edge>, std::__1::less<std::__1::tuple<unsigned long, unsigned long> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::tuple<unsigned long, unsigned long>, HGDotGraph::Edge> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::tuple<unsigned long, unsigned long>, HGDotGraph::Edge>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::tuple<unsigned long, unsigned long>, std::__1::__value_type<std::__1::tuple<unsigned long, unsigned long>, HGDotGraph::Edge>, std::__1::less<std::__1::tuple<unsigned long, unsigned long> >, true> >=Q}}}^{__sFILE}BB{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}}{HGBufferDumper={basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}iiB}IiQQi^{HGLimitsCache}^{HGRenderQueue}^v{basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >={__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >={__rep=(?={__long=QQ*}{__short=(?=Cc)[23c]}{__raw=[3Q]})}}}},V_specificRenderer

- (void)performHeliumPreloadJobForSpecificRenderer;
- (int)amortizationCount;
- (void)incrementAmortizationCount;
- (int)virtualScreen;
-     // Error parsing type: ^{?=i[16q][24Aq]}16@0:8, name: graphExecBlockedInfo
- (double)totalBufferCopyTime;
- (_Bool)dequeueJobIfNotStarted;
- (_Bool)enqueueToRenderLocationList:(const struct FxDeviceSet *)arg1 priority:(int)arg2;
- (_Bool)enqueueToRenderLocation:(struct FxDevice *)arg1 priority:(int)arg2;
- (double)gpuIdleTimeBeforeJob;
- (void)_jobFinished;
- (void)_nodeDidFinish:(id)arg1;
- (void)_jobStarted;
- (_Bool)isComplete;
- (_Bool)bypassComplete;
- (_Bool)waitForCompletionBeforeDate:(id)arg1;
- (id)newRequestedOutput:(id)arg1 location:(const struct FxDeviceSet *)arg2 roi:(struct CGRect)arg3 pixelTransform:(id)arg4 scalingInfo:(struct FFAsyncFanoutScalingInfo)arg5 dithered:(BOOL)arg6 background:(int)arg7 zebraMode:(unsigned int)arg8 zebraEpsilons:(struct FFRangeCheckEpsilonValues *)arg9 workingSpace:(int)arg10 streamColorSpace:(int)arg11 clampColorSpace:(struct CGColorSpace *)arg12;
- (id)_newImgWithBackground:(int)arg1 roi:(struct CGRect)arg2 pixelTransform:(id)arg3 scalingInfo:(struct FFAsyncFanoutScalingInfo)arg4 workingSpace:(int)arg5;
- (id)_findExistingOutput:(id)arg1 locationOptions:(const struct FxDeviceSet *)arg2 roi:(struct HGRect)arg3 pixelTransform:(id)arg4 dithered:(BOOL)arg5 background:(int)arg6 zebraMode:(unsigned int)arg7;
- (id)description;
- (void)dealloc;
- (id)initWithSourceImage:(id)arg1 bindingInfo:(id)arg2 object:(id)arg3;

@end

