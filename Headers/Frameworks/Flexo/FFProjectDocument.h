//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import <Flexo/FFCatalogDocument.h>

@class FFProject;

@interface FFProjectDocument : FFCatalogDocument
{
    FFProject *_project;
    int _fileLock;
    unsigned int _actionCount;
    BOOL _inTrash;
}

+ (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
+ (void)initialize;
+ (Class)_classForContentsOfURL:(id)arg1 error:(id *)arg2;
+ (id)projectInfo:(id)arg1;
+ (id)defaultFileExtension;
+ (id)newUniqueName:(id)arg1 extension:(id)arg2 iteration:(int)arg3;
+ (id)_iconForHomeFolder;
+ (id)_iconForURL:(id)arg1 overrideGenericIcon:(BOOL)arg2;
+ (id)readProjectInfoFromBundle:(id)arg1 error:(id *)arg2;
+ (id)readProjectInfosFromRoot:(id)arg1 includeFolderStructure:(BOOL)arg2 error:(id *)arg3;
+ (id)projectMap;
+ (void)projectFolderTreeHasChanged;
+ (void)clearProjectMap;
+ (id)directoryFromUniqueIdentifier:(id)arg1 forceUpdate:(BOOL)arg2;
+ (BOOL)canResetUniqueIdentifierAtOpen:(id)arg1;
+ (id)resetUniqueIdentifier:(id)arg1 error:(id *)arg2;
+ (id)directoryFromUniqueIdentifier:(id)arg1;
+ (BOOL)deleteProject:(id)arg1 relatedFiles:(BOOL)arg2 error:(id *)arg3;
+ (void)deleteAllProjectData;
+ (id)projectsRootName;
+ (id)defaultLocation;
+ (id)defaultDocumentName;
+ (id)projectFolderTree;
+ (void)projectFolderMovedFromURL:(id)arg1 toURL:(id)arg2 fromTrashURL:(id)arg3 toTrashURL:(id)arg4;
+ (id)fileManager;
+ (id)sharedCatalog;
+ (id)sharedUndoHandler;
+ (id)sharedUndoManager;
+ (int)versionCurrent;
+ (int)versionOldest;
+ (id)documentForProject:(id)arg1;
+ (id)makeUniqueDirectory:(id)arg1 error:(id *)arg2;
+ (id)projectFileName;
+ (BOOL)isProjectURL:(id)arg1;
+ (void)forceUpdatingProjects;
+ (BOOL)isForceUpdatingProjects;
+ (id)localizedErrorDict:(id)arg1 param:(id)arg2 resolution:(id)arg3;
+ (BOOL)isReservedName:(id)arg1;
+ (id)invalidCharacterSet;
+ (BOOL)validateProjectName:(id)arg1 error:(id *)arg2;
+ (BOOL)_moveURL:(id)arg1 toURL:(id)arg2 error:(id *)arg3;
+ (id)_backup:(id)arg1 uniqueName:(id)arg2 error:(id *)arg3;
+ (id)_docURLsFromDocArray:(id)arg1;
+ (id)_verifyContainedDocuments:(id)arg1 forURL:(id)arg2;
+ (void)_updateDocs:(id)arg1 fromURLs:(id)arg2 oldFolderURL:(id)arg3 newFolderURL:(id)arg4;
+ (void)_undoRecycleURLs:(id)arg1 containedDocuments:(id)arg2;
+ (void)_recycleURLs:(id)arg1 containedDocuments:(id)arg2;
+ (void)_undoNewFolder:(id)arg1;
+ (id)findLatestBackupInDirectory:(id)arg1;
+ (id)documentPathForFolderURL:(id)arg1;
+ (BOOL)checkDocumentIsValidAtFolderURL:(id)arg1;
+ (BOOL)ensureDocumentIsValidAtFolderURL:(id)arg1;
+ (void)_actionWithTarget:(id)arg1 selector:(SEL)arg2 object:(id)arg3;
+ (void)_actionBegin:(id)arg1;
+ (BOOL)_actionEnd:(id)arg1 save:(BOOL)arg2 error:(id *)arg3;
+ (BOOL)actionMoveFoldersToTrash:(id)arg1 containedDocuments:(id)arg2 actionName:(id)arg3 error:(id *)arg4;
+ (id)actionNewFolder:(id)arg1 error:(id *)arg2;
+ (BOOL)actionMoveFolder:(id)arg1 targetURL:(id)arg2 containedDocuments:(id)arg3 actionName:(id)arg4 error:(id *)arg5;
+ (void)registerUndoWithTarget:(id)arg1 selector:(SEL)arg2 object:(id)arg3;
+ (void)_handleUndoRedoOperationAfter:(CDUnknownBlockType)arg1 operationBefore:(CDUnknownBlockType)arg2;
+ (void)_handleUndoRedoOperationBefore:(CDUnknownBlockType)arg1 operationAfter:(CDUnknownBlockType)arg2;
+ (BOOL)performAction:(id)arg1 withObjects:(id)arg2 objectDocumentBlock:(CDUnknownBlockType)arg3 error:(id *)arg4 operationBefore:(CDUnknownBlockType)arg5 operationAfter:(CDUnknownBlockType)arg6 operation:(CDUnknownBlockType)arg7;
+ (BOOL)performAction:(id)arg1 withObjects:(id)arg2 error:(id *)arg3 operationBefore:(CDUnknownBlockType)arg4 operationAfter:(CDUnknownBlockType)arg5 operation:(CDUnknownBlockType)arg6;
+ (BOOL)performAction:(id)arg1 withObjects:(id)arg2 error:(id *)arg3 operation:(CDUnknownBlockType)arg4;
+ (BOOL)performAction:(id)arg1 withObject:(id)arg2 objectDocumentBlock:(CDUnknownBlockType)arg3 error:(id *)arg4 operationBefore:(CDUnknownBlockType)arg5 operationAfter:(CDUnknownBlockType)arg6 operation:(CDUnknownBlockType)arg7;
+ (BOOL)performAction:(id)arg1 withObject:(id)arg2 error:(id *)arg3 operationBefore:(CDUnknownBlockType)arg4 operationAfter:(CDUnknownBlockType)arg5 operation:(CDUnknownBlockType)arg6;
- (id)newDefaultProject:(id)arg1 type:(id)arg2;
- (id)newDocumentCatalog:(id *)arg1;
- (BOOL)undoManagerIsShared;
- (id)projectDirectoryName;
- (id)projectDirectory;
- (id)projectFileName;
- (BOOL)_setFileLock:(BOOL)arg1 error:(id *)arg2;
- (BOOL)_validateStore:(id)arg1 location:(id)arg2 error:(id *)arg3;
- (BOOL)_validateStore:(id *)arg1;
- (id)init;
- (id)initWithType:(id)arg1 project:(id)arg2 error:(id *)arg3;
- (id)initWithType:(id)arg1 error:(id *)arg2;
- (id)initWithCatalog:(id)arg1 store:(id)arg2 ofType:(id)arg3 error:(id *)arg4;
- (id)initWithCatalog:(id)arg1 store:(id)arg2 ofType:(id)arg3 validate:(BOOL)arg4 error:(id *)arg5;
- (void)dealloc;
- (void)backupForUpdate:(int)arg1;
- (BOOL)warnForUpdate;
- (BOOL)_bringUpToDate:(id *)arg1;
- (BOOL)updateFromVersion:(int)arg1 error:(id *)arg2;
- (BOOL)projectDirectoryIsEmpty;
- (void)close;
- (BOOL)moveStore:(id)arg1 toURL:(id)arg2 error:(id *)arg3;
- (void)setFileURL:(id)arg1;
- (id)project;
- (void)setProject:(id)arg1;
- (id)rootObject;
- (void)setRootObject:(id)arg1;
- (id)displayName;
- (id)storesEnumerator;
- (BOOL)rename:(id)arg1 makeUnique:(BOOL)arg2 error:(id *)arg3;
- (BOOL)readFromURL:(id)arg1 ofType:(id)arg2 error:(id *)arg3;
- (void)limitBackupsTo:(int)arg1 in:(id)arg2;
- (BOOL)writeSafelyToURL:(id)arg1 ofType:(id)arg2 forSaveOperation:(unsigned long long)arg3 error:(id *)arg4;
- (BOOL)saveToURL:(id)arg1 ofType:(id)arg2 forSaveOperation:(unsigned long long)arg3 error:(id *)arg4;
- (void)saveDocument:(id)arg1;
- (BOOL)isInTrash;
- (void)_addToTrashList;
- (void)_removeFromTrashList;
- (void)updateChangeCount:(unsigned long long)arg1;
- (id)_UIState;
- (void)_undoRedoUIState:(id)arg1;
- (void)_undoRedoAction:(struct NSObject *)arg1;
- (void)_registerUndoAction:(struct NSObject *)arg1;
- (void)_actionBegin:(id)arg1 object:(id)arg2;
- (BOOL)_actionEnd:(id)arg1 object:(id)arg2 save:(BOOL)arg3 error:(id *)arg4;
- (void)_actionWithTarget:(id)arg1 selector:(SEL)arg2 object:(id)arg3;
- (void)_actionWithTarget:(id)arg1 selector:(SEL)arg2 object:(id)arg3 object:(id)arg4;
- (void)_registerUndoWithTarget:(id)arg1 selector:(SEL)arg2 object:(id)arg3;
- (void)_performUndoRedoBlock:(CDUnknownBlockType)arg1;
- (void)_registerUndoBlock:(CDUnknownBlockType)arg1;
- (void)operationApplyState:(id)arg1 toChannel:(id)arg2;
- (void)operationInsertChannel:(id)arg1 toParentFolder:(id)arg2 inEffect:(id)arg3 atIndex:(unsigned long long)arg4 delegate:(id)arg5;
- (void)operationRemoveChannel:(id)arg1 fromParentFolder:(id)arg2 inEffect:(id)arg3 atIndex:(unsigned long long)arg4 delegate:(id)arg5;
- (void)operationMoveChannel:(id)arg1 inParentFolder:(id)arg2 inEffect:(id)arg3 toIndex:(unsigned long long)arg4 delegate:(id)arg5;
- (void)operationSetFlag:(unsigned long long)arg1 onChannel:(id)arg2 delegate:(id)arg3;
- (void)operationResetFlag:(unsigned long long)arg1 onChannel:(id)arg2 delegate:(id)arg3;
- (void)_actionBegin:(id)arg1;
- (BOOL)_actionEnd:(id)arg1 save:(BOOL)arg2 error:(id *)arg3;
- (BOOL)actionRename:(id)arg1 actionName:(id)arg2 error:(id *)arg3;
- (void)registerUndoWithTarget:(id)arg1 selector:(SEL)arg2 object:(id)arg3;

@end

