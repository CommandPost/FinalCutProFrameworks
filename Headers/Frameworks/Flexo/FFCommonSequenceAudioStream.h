//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import <Flexo/FFStreamAudio.h>

#import "FFStreamAudioScopingWindowProtocol.h"

__attribute__((visibility("hidden")))
@interface FFCommonSequenceAudioStream : FFStreamAudio <FFStreamAudioScopingWindowProtocol>
{
    unsigned int _sampleRate;
    // Error parsing type: ^{FFAudioDynamicScopingWindow=^^?^^?BBBBB^{Thread}{Synchronizable=^^?{_opaque_pthread_mutex_t=q[56c]}^{_opaque_pthread_t}Q{_opaque_pthread_cond_t=q[40c]}}{Synchronizable=^^?{_opaque_pthread_mutex_t=q[56c]}^{_opaque_pthread_t}Q{_opaque_pthread_cond_t=q[40c]}}IBB{list<FFAudioSourceScope, std::__1::allocator<FFAudioSourceScope> >={__list_node_base<FFAudioSourceScope, void *>=^{__list_node_base<FFAudioSourceScope, void *>}^{__list_node_base<FFAudioSourceScope, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<FFAudioSourceScope, void *> > >=Q}}{vector<FFAudioStreamScope *, std::__1::allocator<FFAudioStreamScope *> >=^^{FFAudioStreamScope}^^{FFAudioStreamScope}{__compressed_pair<FFAudioStreamScope **, std::__1::allocator<FFAudioStreamScope *> >=^^{FFAudioStreamScope}}}{vector<FFAudioStreamScope *, std::__1::allocator<FFAudioStreamScope *> >=^^{FFAudioStreamScope}^^{FFAudioStreamScope}{__compressed_pair<FFAudioStreamScope **, std::__1::allocator<FFAudioStreamScope *> >=^^{FFAudioStreamScope}}}{vector<FFAudioStreamScope *, std::__1::allocator<FFAudioStreamScope *> >=^^{FFAudioStreamScope}^^{FFAudioStreamScope}{__compressed_pair<FFAudioStreamScope **, std::__1::allocator<FFAudioStreamScope *> >=^^{FFAudioStreamScope}}}{vector<FFAudioStreamScope *, std::__1::allocator<FFAudioStreamScope *> >=^^{FFAudioStreamScope}^^{FFAudioStreamScope}{__compressed_pair<FFAudioStreamScope **, std::__1::allocator<FFAudioStreamScope *> >=^^{FFAudioStreamScope}}}qq{atomic<long long>=Aq}{atomic<long long>=Aq}{atomic<long long>=Aq}q@@@BBdd^{FFAudioGraph}^{FFAudioNode}^{FFAudioNode}^{FFAudioNode}^{FFAudioNode}I@{unique_ptr<FFAudioBuss, std::__1::default_delete<FFAudioBuss> >={__compressed_pair<FFAudioBuss *, std::__1::default_delete<FFAudioBuss> >=^{FFAudioBuss}}}{map<FFAnchoredObject *, FFAudioEffectsBussAnchoredObjectDelegate *, std::__1::less<FFAnchoredObject *>, std::__1::allocator<std::__1::pair<FFAnchoredObject *const, FFAudioEffectsBussAnchoredObjectDelegate *> > >={__tree<std::__1::__value_type<FFAnchoredObject *, FFAudioEffectsBussAnchoredObjectDelegate *>, std::__1::__map_value_compare<FFAnchoredObject *, std::__1::__value_type<FFAnchoredObject *, FFAudioEffectsBussAnchoredObjectDelegate *>, std::__1::less<FFAnchoredObject *>, true>, std::__1::allocator<std::__1::__value_type<FFAnchoredObject *, FFAudioEffectsBussAnchoredObjectDelegate *> > >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FFAnchoredObject *, FFAudioEffectsBussAnchoredObjectDelegate *>, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::__map_value_compare<FFAnchoredObject *, std::__1::__value_type<FFAnchoredObject *, FFAudioEffectsBussAnchoredObjectDelegate *>, std::__1::less<FFAnchoredObject *>, true> >=Q}}}@}, name: _dynamicScopingWindow
}

- (void)dealloc;
- (id)initWithSource:(id)arg1 context:(id)arg2 options:(id)arg3 rootItem:(id)arg4;
- (CDStruct_e83c9415)calculateScopingWindowTimeRange:(CDStruct_e83c9415)arg1 prerollRange:(CDStruct_e83c9415)arg2;
- (void)findAssociatedMixBussScopingWindows:(id)arg1;
- (void)advanceScopingWindow:(CDStruct_1b6d18a9)arg1 sync:(id)arg2;
- (void)setRate:(double)arg1;
- (void)prerollEnd;
- (void)prerollBegin:(CDStruct_1b6d18a9)arg1 prerollDuration:(CDStruct_1b6d18a9)arg2 maxDuration:(CDStruct_1b6d18a9)arg3 rate:(double)arg4 sync:(id)arg5;
- (void)_prerollBeginFinish:(CDStruct_1b6d18a9)arg1 prerollDuration:(CDStruct_1b6d18a9)arg2 maxDuration:(CDStruct_1b6d18a9)arg3 rate:(double)arg4 sync:(id)arg5;
- (void)_prerollBeginSetup;
- (id)anchoredObject;
- (id)anchoredSequenceSource;

@end

