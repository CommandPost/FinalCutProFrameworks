//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import <Flexo/FFHeliumEffect.h>

@class FFLumaBumpContainer, FFRefColorMatchInfoContainer;

@interface FFBalanceColorBaseEffect : FFHeliumEffect
{
    BOOL _deferOperation;
    BOOL _HDRCompatible;
    FFLumaBumpContainer *_lumaBumps;
    int _balanceOptions;
    double _skinColorRed;
    double _skinColorGreen;
    double _skinColorBlue;
    double _whiteBalanceColorRed;
    double _whiteBalanceColorGreen;
    double _whiteBalanceColorBlue;
    FFRefColorMatchInfoContainer *_refColorMatchInfo;
    unsigned char _cachedIsAtDefaultSettings;
}

+ (id)copyClassDescription;
@property(readonly, nonatomic) FFLumaBumpContainer *lumaBumpContainer; // @synthesize lumaBumpContainer=_lumaBumps;
@property BOOL deferOperation; // @synthesize deferOperation=_deferOperation;
- (BOOL)projectUpdaterConformLumaBumpsToDataWithError:(id *)arg1;
- (CDStruct_bdcb2b0d)md5;
- (BOOL)isNoOp;
- (void)channelParameterChanged:(id)arg1;
- (void)effectiveRangeDidChange;
- (BOOL)_cachedIsAtDefaultSettings;
- (BOOL)isAtDefaultSettings;
-     // Error parsing type: v112@0:8^{HGNode=^^?{atomic<unsigned int>=AI}ii^viIii^fi^{HGShaderEntry}^^{HGNodeInput}i^{HGBitmap}BBBBB{set<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >={__tree<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<HGNodeInput *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<HGNodeInput *> >=Q}}}i^{HGNode}{HGRect=iiii}{HGRect=iiii}^{HGRenderer}^{HGBitmap}^{HGNode}iii{HGRect=iiii}ii^{HGBitmap}{HGShaderBinding=[1i]iiiiiII}^{HGNodeChain}^{HGShaderEntry}iB{HGBlendingInfo=Qiiiiii}f}16{?=qiIq}24@48@56@64@72{CGRect={CGPoint=dd}{CGSize=dd}}80, name: setParameterValuesForNode:atTime:withInputStream:context:pixelTransform:inputData:inputBounds:
-     // Error parsing type: v112@0:8^{HGNode=^^?{atomic<unsigned int>=AI}ii^viIii^fi^{HGShaderEntry}^^{HGNodeInput}i^{HGBitmap}BBBBB{set<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >={__tree<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<HGNodeInput *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<HGNodeInput *> >=Q}}}i^{HGNode}{HGRect=iiii}{HGRect=iiii}^{HGRenderer}^{HGBitmap}^{HGNode}iii{HGRect=iiii}ii^{HGBitmap}{HGShaderBinding=[1i]iiiiiII}^{HGNodeChain}^{HGShaderEntry}iB{HGBlendingInfo=Qiiiiii}f}16{?=qiIq}24@48@56@64@72{CGRect={CGPoint=dd}{CGSize=dd}}80, name: _setParameterValuesForNode:atTime:withInputStream:context:pixelTransform:inputData:inputBounds:
-     // Error parsing type: ^{HGNode=^^?{atomic<unsigned int>=AI}ii^viIii^fi^{HGShaderEntry}^^{HGNodeInput}i^{HGBitmap}BBBBB{set<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >={__tree<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<HGNodeInput *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<HGNodeInput *> >=Q}}}i^{HGNode}{HGRect=iiii}{HGRect=iiii}^{HGRenderer}^{HGBitmap}^{HGNode}iii{HGRect=iiii}ii^{HGBitmap}{HGShaderBinding=[1i]iiiiiII}^{HGNodeChain}^{HGShaderEntry}iB{HGBlendingInfo=Qiiiiii}f}24@0:8@16, name: newNodeForContext:
- (id)processingFormat:(int)arg1;
- (BOOL)writeDefaultChannels;
- (id)inputKeys;
- (void)encodeWithCoder:(id)arg1;
- (void)_postInit:(id)arg1 isXML:(BOOL)arg2;
- (void)_decodeFromCoder:(id)arg1 into:(id)arg2;
- (void)_copyWithZone:(struct _NSZone *)arg1 into:(id)arg2;
- (id)description;
- (id)propertiesToRecordWithCatalogVersion:(unsigned long long)arg1;
- (void)reset;
- (void)didChangeWithRecordedProperties;
- (void)willChangeWithRecordedProperties:(id)arg1;
- (id)propertiesToRecord;
- (void)setWithRecordedProperties:(id)arg1;
- (id)extendedDataForRecording;
- (void)setExtendedDataForRecording:(id)arg1;
- (void)balanceWithHistoAnalysis:(struct OMHistoAnalysis *)arg1 faceInfo:(id)arg2 isEncompassingTransaction:(BOOL)arg3 balanceOptions:(int)arg4 red:(double)arg5 green:(double)arg6 blue:(double)arg7;
- (void)balanceWithHistoAnalysis:(struct OMHistoAnalysis *)arg1 faceInfo:(id)arg2 isEncompassingTransaction:(BOOL)arg3;
- (void)setAdjustment:(vector_37556099 *)arg1 isEncompassingTransaction:(BOOL)arg2;
- (void)didChangeProperties;
- (void)willChangeProperties;
@property(readonly, nonatomic) FFRefColorMatchInfoContainer *refColorMatchInfo; // @dynamic refColorMatchInfo;
- (void)setRefColorMatchInfo:(id)arg1;
@property double whiteBalanceColorBlue; // @dynamic whiteBalanceColorBlue;
@property double whiteBalanceColorGreen; // @dynamic whiteBalanceColorGreen;
@property double whiteBalanceColorRed; // @dynamic whiteBalanceColorRed;
@property double skinColorBlue; // @dynamic skinColorBlue;
@property double skinColorGreen; // @dynamic skinColorGreen;
@property double skinColorRed; // @dynamic skinColorRed;
@property(getter=isHDRCompatible) BOOL HDRCompatible; // @dynamic HDRCompatible;
@property int balanceOptions; // @dynamic balanceOptions;
- (void)setLumaBumpContainer:(id)arg1;
@property(readonly, nonatomic) FFLumaBumpContainer *lumaBumps; // @dynamic lumaBumps;
- (void)setLumaBumps:(id)arg1;
- (void)dealloc;
- (id)initWithEffectID:(id)arg1;

@end

