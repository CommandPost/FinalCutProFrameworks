//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import <Flexo/FFSourceColorConformBaseClass.h>

#import "FFSourceColorConformProtocol.h"

@interface FFRAWProcessingInfo : FFSourceColorConformBaseClass <FFSourceColorConformProtocol>
{
    int _bayerPattern;
    unsigned int _blackLevel;
    unsigned int _whiteLevel;
    float _whiteBalanceRedFactor;
    float _whiteBalanceBlueFactor;
    float _M[3][3];
    float _exposureFactor;
}

- (BOOL)isEquivalentTo:(struct FFSourceColorConformBaseClass *)arg1 forTargetColorSpace:(int)arg2;
- (BOOL)specifiesOrdinaryProcessing;
-     // Error parsing type: v32@0:8^{HGColorConform=^^?Iii^vii^fi^{HGShaderEntry}^^{HGNodeInput}i^{HGBitmap}BBB{set<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >={__tree<HGNodeInput *, std::__1::less<HGNodeInput *>, std::__1::allocator<HGNodeInput *> >=^{__tree_end_node<std::__1::__tree_node_base<void *> *>}{__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<HGNodeInput *, void *> > >={__tree_end_node<std::__1::__tree_node_base<void *> *>=^{__tree_node_base<void *>}}}{__compressed_pair<unsigned long, std::__1::less<HGNodeInput *> >=Q}}}i^{HGNode}{HGRect=iiii}{HGRect=iiii}^{HGRenderer}^{HGBitmap}^{HGNode}iii{HGRect=iiii}ii^{HGBitmap}{HGShaderBinding=[1i]iiiiiII}^{HGNodeChain}^{HGShaderEntry}iB{HGBlendingInfo=Qiiiiii}f^{HGNode}^{HGNode}^{HGColorConformNodeListCacheItem}BBiiiii{HGRect=iiii}BBffiiiiiiiiiiiiIfff[4]ii^{__CFData}iffQQQBi{vector<unsigned char, std::__1::allocator<unsigned char> >=**{__compressed_pair<unsigned char *, std::__1::allocator<unsigned char> >=*}}ffffBiii[3f][3f][3f]fBIfB}16i24c28, name: setColorConformPresetAndParameters:toConvertToColorSpace:fromYCbCr:
- (BOOL)canConvertToColorSpace:(int)arg1;
- (int)targetColorSpaceFor:(int)arg1;
- (void)dealloc;
- (id)initWithBayerPattern:(int)arg1 blackLevel:(unsigned int)arg2 whiteLevel:(unsigned int)arg3 whiteBalanceRedFactor:(float)arg4 whiteBalanceBlueFactor:(float)arg5 M00:(float)arg6 M01:(float)arg7 M02:(float)arg8 M10:(float)arg9 M11:(float)arg10 M12:(float)arg11 M20:(float)arg12 M21:(float)arg13 M22:(float)arg14 exposureFactor:(float)arg15;

@end

