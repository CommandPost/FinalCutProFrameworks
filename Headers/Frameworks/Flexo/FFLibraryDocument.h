//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import <Flexo/FFModelDocument.h>

@class FFLibraryBackupTask, FFModelUpdateHandler, FFResourceMap, NSError, NSMutableDictionary, NSURL;

@interface FFLibraryDocument : FFModelDocument
{
    NSURL *_refURL;
    double _nextBackupTime;
    BOOL _checkedDatabases;
    BOOL _isTempLibrary;
    BOOL _saveImmediate;
    struct FFPMRSimpleTimer _updateWatch;
    NSMutableDictionary *_settings;
    NSMutableDictionary *_locations;
    NSURL *_cacheFolder;
    NSURL *_cacheFolderLink;
    id _cacheFolderID;
    NSMutableDictionary *_appendedUpdatesMap;
    NSMutableDictionary *_projectBackupDates;
    FFResourceMap *_effectFiles;
    id _volumeID;
    FFModelUpdateHandler *_updateHandler;
    NSError *_lastBackupError;
    int _lastBackupErrorCount;
    BOOL _libraryNeedsValidation;
    BOOL _reopening;
    BOOL _incompatibleLibraryMessageShown;
    int _updateStatus;
    int _branchIDStatus;
    FFLibraryBackupTask *_backupTask;
}

+ (id)readLibraryVersionInfo:(id)arg1;
+ (id)savedNameSettingsKeyForExternalFolder:(long long)arg1;
+ (BOOL)canMoveExternalFolder:(id)arg1 toURL:(id)arg2;
+ (id)externalFolderInfoFilenameForType:(long long)arg1;
+ (id)defaultURLForLocation:(int)arg1;
+ (BOOL)makeLocation:(id)arg1 error:(id *)arg2;
+ (id)homeRelativeURLForPath:(id)arg1;
+ (id)effectMapURLForPath:(id)arg1 library:(id)arg2 location:(int)arg3;
+ (id)effectMapURLForPath:(id)arg1 libraryOrNil:(id)arg2;
+ (double)backupInterval;
+ (void)alert:(id)arg1 runModalForWindow:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;
+ (void)alertFinished:(id)arg1 returnCode:(long long)arg2 context:(void *)arg3;
+ (id)oldDefaultBackupLocation;
+ (int)isAnyLibraryUpdating;
+ (void)updateLegacyBackupLocation;
+ (void)_emptyLibraryTempFolder:(id)arg1;
+ (id)openDocumentWithoutDisplay:(id)arg1 error:(id *)arg2;
+ (id)newTemporaryDocumentForLibrary:(id)arg1 error:(id *)arg2;
+ (id)fileType;
+ (id)defaultFileExtension;
+ (id)defaultDocumentNameExtension;
+ (id)defaultDocumentName;
+ (id)defaultLocation;
+ (id)defaultURL;
+ (void)addEventRecordsToMenu:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
+ (void)addEventRecordsToMenu:(id)arg1 target:(id)arg2 action:(SEL)arg3 tag:(int)arg4;
+ (void)addLibraryRecordsToMenu:(id)arg1 target:(id)arg2 action:(SEL)arg3 tag:(int)arg4;
+ (BOOL)warnAboutUnsupportedLocationForLibraryDocument:(id)arg1 saving:(BOOL)arg2 error:(id *)arg3;
+ (BOOL)_volumeSupportsRenameWhileOpen:(id)arg1;
+ (id)resolveBookmark:(id)arg1 error:(id *)arg2;
+ (id)bookmarkForURL:(id)arg1 error:(id *)arg2;
+ (id)displayNameForURL:(id)arg1;
+ (id)displayNameForURLBookmark:(id)arg1;
+ (id)modificationDateForURL:(id)arg1;
+ (BOOL)isLibraryURL:(id)arg1;
+ (id)copyActiveLibraries;
+ (void)initialize;
@property(nonatomic) BOOL incompatibleLibraryMessageShown; // @synthesize incompatibleLibraryMessageShown=_incompatibleLibraryMessageShown;
@property(nonatomic) int branchIDStatus; // @synthesize branchIDStatus=_branchIDStatus;
@property(nonatomic) int updateStatus; // @synthesize updateStatus=_updateStatus;
@property(retain, nonatomic) FFLibraryBackupTask *backupTask; // @synthesize backupTask=_backupTask;
@property(nonatomic, getter=isReopening) BOOL reopening; // @synthesize reopening=_reopening;
@property BOOL libraryNeedsValidation; // @synthesize libraryNeedsValidation=_libraryNeedsValidation;
- (void)stopObservingCatalog;
- (void)startObservingCatalog;
- (void)libraryCatalogWillSaveNotification:(id)arg1;
- (BOOL)updateLibraryVersionStrings:(id)arg1;
- (id)copyCatalogVersion:(long long)arg1 withBundleInfo:(BOOL)arg2;
- (id)librarySettingsID;
- (id)persistentFileID;
- (id)bindToExternalFolderOfType:(long long)arg1 inLocation:(id)arg2;
- (id)savedNameForExternalFolder:(long long)arg1;
- (void)writeSavedName:(id)arg1 forExternalFolder:(long long)arg2;
- (id)syncExternalFolderInLocation:(id)arg1 folderType:(long long)arg2 create:(BOOL)arg3 error:(id *)arg4;
- (BOOL)stealCacheFolder:(id)arg1 error:(id *)arg2;
- (id)searchForExternalFolderOfType:(long long)arg1 inLocation:(id)arg2 preferredName:(id)arg3 info:(id *)arg4 error:(id *)arg5;
- (id)readExternalFolderInfo:(id)arg1 folderType:(long long)arg2 error:(id *)arg3;
- (BOOL)writeExternalFolderInfo:(id)arg1 folderType:(long long)arg2 error:(id *)arg3;
- (BOOL)syncExternalCacheFolder:(id *)arg1;
- (BOOL)updateCacheFolderLink:(id)arg1 error:(id *)arg2;
- (id)externalCacheFolder;
- (id)cacheFolderLink;
- (void)setTemplateStorageLocation:(int)arg1;
- (int)templateStorageLocation;
- (id)externalCacheLocation;
- (BOOL)setExternalCacheLocation:(id)arg1 error:(id *)arg2;
- (id)externalMediaLocation;
- (BOOL)setExternalMediaLocation:(id)arg1 error:(id *)arg2;
- (id)externalBackupLocation;
- (BOOL)setExternalBackupLocation:(id)arg1 error:(id *)arg2;
- (void)setBackupsEnabled:(BOOL)arg1;
- (BOOL)backupsEnabled;
- (void)setExternalLocations:(id)arg1;
- (id)copyExternalLocations;
- (id)copyCurrentLocations;
- (id)settingsKeyForLocation:(int)arg1;
- (id)externalURLForLocation:(int)arg1;
- (BOOL)syncLocation:(int)arg1 error:(id *)arg2;
- (BOOL)findDisplayName:(id *)arg1 forLocation:(int)arg2 error:(id *)arg3;
- (BOOL)findURL:(id *)arg1 forLocation:(int)arg2 error:(id *)arg3;
- (BOOL)setURL:(id)arg1 forLocation:(int)arg2 error:(id *)arg3;
- (id)libraryRelativeURLForPath:(id)arg1;
- (id)effectsMapURL;
- (id)effectMapRelativeURLForPath:(id)arg1;
- (id)copyEffectFileIdentifiers;
- (id)copyEffectFileURLs;
- (void)setEffectFile:(id)arg1 forIdentifier:(id)arg2 effectClass:(Class)arg3 location:(int)arg4;
- (id)copyEffectFileIdentifiersForURL:(id)arg1 location:(int)arg2;
- (int)inferredTemplateStorageLocation:(id)arg1;
- (id)effectFileForIdentifier:(id)arg1;
- (Class)effectClassForIdentifier:(id)arg1;
- (BOOL)openEffectFilesMap:(id *)arg1;
- (BOOL)writeSettingsForBackupLibrary:(id)arg1 error:(id *)arg2;
- (id)settingsURL;
- (BOOL)settingsAreDirty;
- (void)settingsAreDirty:(BOOL)arg1;
- (BOOL)saveSettings:(id *)arg1;
- (id)mutableSettings;
- (id)readSettingsValueForKey:(id)arg1;
- (BOOL)writeSettingsValue:(id)arg1 forKey:(id)arg2;
- (BOOL)syncSettings:(id *)arg1;
- (void)projectChanged:(id)arg1;
- (void)item:(id)arg1 asyncFailure:(id)arg2;
- (id)runLibraryRepairTask:(id *)arg1;
- (int)restoreLibraryFromBundle:(id *)arg1;
- (BOOL)autoLibraryRepairEnabled;
- (BOOL)_writeLibrarySyncState:(BOOL)arg1 error:(id *)arg2;
- (BOOL)_readLibrarySyncState;
- (BOOL)_validateStore:(id)arg1 location:(id)arg2 error:(id *)arg3;
- (void)alertMissingMedia;
- (BOOL)backupTask:(id)arg1 finishBackup:(id)arg2 error:(id *)arg3;
- (BOOL)writeBackupWithOptions:(unsigned long long)arg1 validate:(BOOL)arg2 error:(id *)arg3;
- (void)writePeriodicBackup;
- (id)syncBackupFolder:(unsigned long long)arg1 error:(id *)arg2;
- (id)internalBackupsFolder;
- (void)setLastBackupError:(id)arg1;
- (id)lastBackupError;
- (void)cancelBackup:(id)arg1;
- (BOOL)backupNeeded;
- (void)setNextBackupTime:(double)arg1;
- (double)nextBackupTime;
- (void)resetBackupTimer:(double)arg1;
- (BOOL)updateColorProcessingMode:(int)arg1 error:(id *)arg2;
- (id)storedColorProcessingMode;
- (BOOL)presentError:(id)arg1;
- (BOOL)handlePotentialUnmountedDocumentError:(id)arg1;
- (void)presentDocumentFailureAlert:(id)arg1;
- (void)_appendUpdateHistory:(id)arg1 forGroup:(id)arg2;
- (BOOL)warnForBranchIDTag;
- (void)showIncompatibleLibraryMessage:(id)arg1;
- (BOOL)warnForUpdate;
- (id)addUpdateLine:(id)arg1 to:(id)arg2;
- (BOOL)_bringUpToDate:(id *)arg1;
- (void)_decrementIsPerformingPostLibraryUpdatersCount;
- (void)_incrementIsPerformingPostLibraryUpdatersCount;
- (id)saveChangesString;
- (void)_saveDuringUpdate:(id)arg1;
- (void)updateFinished:(id)arg1;
- (void)saveUpdatedItemsCheckpoint;
- (void)updateWithHandler:(id)arg1;
- (void)update_addAnyMissingDefaultSubrolesForBuiltInRoles;
- (void)update_fixUpdateHistoryForJumper:(int)arg1;
- (void)update_organizedTimeline;
- (void)update_migrateToRoleComponents;
- (void)update_audioMediaComponentWrapup;
- (BOOL)update_iMovieFixProjectMediaMigration:(id *)arg1;
- (BOOL)update_resetHiddenEvents:(id *)arg1;
- (BOOL)updateProjectsIntoHiddenEvents:(id *)arg1;
- (void)setUpdateProjectsIntoHiddenEvents:(BOOL)arg1;
- (BOOL)updateProjectsIntoHiddenEvents;
- (BOOL)update_resetUpdateHistory:(unsigned int)arg1;
- (BOOL)update_clearUpdateHistory;
- (BOOL)update_syncAkiraAndTrunkFromVersion:(int)arg1;
- (void)update_addDefaultLibrarySmartCollection;
- (id)newOwnedClipAndMediaSequencesForLibrary;
- (void)update_usePreviousCustomLibraryBackupLocation;
- (BOOL)didBringUpToDate:(BOOL)arg1 error:(id *)arg2;
- (BOOL)willBringUpToDate:(id *)arg1;
- (BOOL)upgradeLockExists:(id *)arg1;
- (BOOL)enableUpgradeLock:(BOOL)arg1 error:(id *)arg2;
- (id)_libraryUpgradeLockURL;
- (void)setIsUpdating:(BOOL)arg1;
- (BOOL)_shouldContinueUpgradeAfterBackupFailure:(id *)arg1;
- (BOOL)_shouldUpdateNow;
- (void)update_changeExternalCacheFoldersToEventNames;
- (BOOL)writeTemporaryFolder:(id *)arg1 withBlock:(CDUnknownBlockType)arg2;
- (BOOL)writeSafelyToURL:(id)arg1 ofType:(id)arg2 forSaveOperation:(unsigned long long)arg3 error:(id *)arg4;
- (id)makeDefaultEvent:(id *)arg1;
- (id)sharedLock;
- (void)setRootObject:(id)arg1;
- (id)library;
- (id)newRootObject:(id)arg1 type:(id)arg2;
- (void)markNotNew;
- (BOOL)isNew;
- (BOOL)isTemporary;
- (BOOL)isEntireFileLoaded;
- (void)setAllowsDeferredSync:(BOOL)arg1;
- (BOOL)allowsDeferredSync;
- (BOOL)moveToURL:(id)arg1 makeUnique:(BOOL)arg2 error:(id *)arg3;
- (BOOL)syncFileURL:(char *)arg1;
- (void)setFileURL:(id)arg1;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)stopObservingAppBecameActive;
- (void)startObservingAppBecameActive;
- (void)close;
- (BOOL)flushStorage:(id *)arg1;
- (void)dealloc;
- (id)initForURL:(id)arg1 withContentsOfURL:(id)arg2 ofType:(id)arg3 error:(id *)arg4;
- (id)initWithContentsOfURL:(id)arg1 ofType:(id)arg2 error:(id *)arg3;
- (id)initWithURL:(id)arg1 isTemporary:(BOOL)arg2 createDefaultEvent:(BOOL)arg3 error:(id *)arg4;
- (id)initWithURL:(id)arg1 createDefaultEvent:(BOOL)arg2 error:(id *)arg3;
- (id)initWithURL:(id)arg1 error:(id *)arg2;
- (id)initWithType:(id)arg1 error:(id *)arg2;
- (id)init;
- (void)setExcludeFromTimeMachineBackup:(BOOL)arg1;
- (void)makeWindowControllers;
- (id)windowNibName;
- (BOOL)usesFileLock;
- (void)addEventRecordsToMenu:(id)arg1 withBlock:(CDUnknownBlockType)arg2;
- (void)addEventRecordsToMenu:(id)arg1 target:(id)arg2 action:(SEL)arg3 tag:(int)arg4;
- (void)addLibraryRecordsToMenu:(id)arg1 target:(id)arg2 action:(SEL)arg3 tag:(int)arg4;

@end

